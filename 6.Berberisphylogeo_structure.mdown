
##### This document details Settings, paths and scripts used to run fastSTRUCTURE and plot outputs.



Working directory and input files
------------------------------------------

The working directory for fastStructure analyses is

```
3Berberis_phylogeo/fastSTRUCTURE
```

Inside there is a directory for each set of loci analysed. Namely:

* AllLoci: all RAD loci
* HitGP: loci that positively blasted against green plants
* NohitGP: loci that didn't blasted against green plants


Each of them contains the directories of the subset of samples used to run Structure Independently. Namely:

* BerwoOut: all populations from Berberis alpina (including Za), Berberis moranensis (An population) but EXCLUDING outgroup (B. trifolia)
* woZaOut: excluding samples from El Zamorano population (Za) and Berberis trifolia (outgroup)
* BerSS: Berberis alpina sensu stricto, populations (Aj, Iz, Ma, Pe, Tl, To)



AllLoci
------------

### Set wd and input files 
Create working directory and copy and rename accordinly structure file generated by Stacks (see script 5.*) 


```
cd ../fastSTRUCTURE/
mkdir -p AllLoci
cd AllLoci
for i in "BerwoOut" "woZaOut" "BerSS"; do
mkdir -p $i
cp ../../data.out/PopSamples_m3/AllLoci/$i/out.noreplicates/batch_1.structure.tsv ./$i/structure$i.str
done

```

Use the script **struc2faststruct.R** to change the value of missing data from 0 to -9 and to ensure that the first 6 columns contain samples names and metadata only (they are ignored by fastSTRUCTURE) and that there is NO header. This is the format required by fastSTRUCTURE.

```
R 
source("../struc2faststruct.R")
WD<-getwd()
for (i in c("BerwoOut", "woZaOut", "BerSS")) {
	struc2faststruct(inputfile=paste0(WD, "/", i,"/structure", i, ".str"), outputfile=paste0(WD,"/", i,"/structure", i, "fast.str"))
	} 
quit(save=(no))
```


### Run Analyses and plot


#### BerwoOut

Run fastSTRUCTURE with a range of values of K with the **simple prior** and 50 repetitions. 

```
AllLoci$
cd BerwoOut
bsub < bsub.fastSTRUCTURE_BerwoOut_simplerep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_BerwoOut_simplerep-%j.out](./fastSTRUCTURE/AllLoci/BerwoOut/fastSTRUCT_BerwoOut_simplere-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 


The model complexity selected by simple prior where K=2 and K=3. To detect more subtle structure run fasSTRUCTURE with the **logistic prior** and values similar those found for the simple. In this case run with K= 2, 3 with 30 repetitions.

```
AllLoci/BerwoOut$
bsub < bsub.fastSTRUCTURE_BerwoOut_logisticrep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_BerwoOut_logisticrep-%j.out](./fastSTRUCTURE/AllLoci/BerwoOut/fastSTRUCT_BerwoOut_logisticrep-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 



#### woZaOut

Run fastSTRUCTURE with a range of values of K with the **simple prior** and 50 repetitions. 

```
AllLoci$
cd woZaOut
bsub < bsub.fastSTRUCTURE_woZaOut_simplerep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_woZaOut_simplerep-%j.out](./fastSTRUCTURE/AllLoci/woZaOut/fastSTRUCT_woZaOut_simplere-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 


The model complexity selected by simple prior where K=2 and K=3. To detect more subtle structure run fasSTRUCTURE with the **logistic prior** with K= 2, 3 and 30 repetitions.

```
AllLoci/woZaOut$
bsub < bsub.fastSTRUCTURE_woZaOut_logisticrep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_woZaOut_logisticrep-%j.out](./fastSTRUCTURE/AllLoci/woZaOut/fastSTRUCT_woZaOut_logisticrep-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 



#### BerSS

Run fastSTRUCTURE with a range of values of K with the **simple prior** and 50 repetitions. 

```
AllLoci$
cd BerSS
bsub < bsub.fastSTRUCTURE_BerSS_simplerep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_BerSS_simplerep-%j.out](./fastSTRUCTURE/AllLoci/BerSS/fastSTRUCT_BerSS_simplere-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 


The model complexity selected by simple prior where K=2 and K=3. To detect more subtle structure run fasSTRUCTURE with the **logistic prior** and values similar those found for the simple. In this case run with K= 2, 3 and 30 repetitions.

```
AllLoci/BerSS$
bsub < bsub.fastSTRUCTURE_BerSS_logisticrep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_BerSS_logisticrep-%j.out](./fastSTRUCTURE/AllLoci/BerSS/fastSTRUCT_BerSS_logisticrep-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 






COPY DATA BACK TO HD FROM CLUSTER





HitGP
------------

### Set wd and input files 
Create working directory and copy and rename accordinly structure file generated by Stacks (see script 5.*) 


```
cd ../fastSTRUCTURE/
mkdir -p HitGP
cd HitGP
for i in "BerwoOut" "woZaOut" "BerSS"; do
mkdir -p $i
cp ../../data.out/PopSamples_m3/HitGP/HitGP/$i/out.noreplicates/batch_1.structure.tsv ./$i/structure$i.str
done

```

Use the script **struc2faststruct.R** to change the value of missing data from 0 to -9 and to ensure that the first 6 columns contain samples names and metadata only (they are ignored by fastSTRUCTURE) and that there is NO header. This is the format required by fastSTRUCTURE.

```
R 
source("../struc2faststruct.R")
WD<-getwd()
for (i in c("BerwoOut", "woZaOut", "BerSS")) {
	struc2faststruct(inputfile=paste0(WD, "/", i,"/structure", i, ".str"), outputfile=paste0(WD,"/", i,"/structure", i, "fast.str"))
	} 
quit(save="no")
```


### Run Analyses and plot


#### BerwoOut

Run fastSTRUCTURE with a range of values of K with the **simple prior** and 50 repetitions. 

```
HitGP$
cd BerwoOut
bsub < bsub.fastSTRUCTURE_BerwoOut_simplerep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_BerwoOut_simplerep-%j.out](./fastSTRUCTURE/HitGP/BerwoOut/fastSTRUCT_BerwoOut_simplere-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 


The model complexity selected by simple prior where K=XXXXXX. To detect more subtle structure run fasSTRUCTURE with the **logistic prior** and values similar those found for the simple. In this case run with K= XXXXXXXXXXX with 30 repetitions.

```
HitGP/BerwoOut$
bsub < bsub.fastSTRUCTURE_BerwoOut_logisticrep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_BerwoOut_logisticrep-%j.out](./fastSTRUCTURE/HitGP/BerwoOut/fastSTRUCT_BerwoOut_logisticrep-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 



#### woZaOut

Run fastSTRUCTURE with a range of values of K with the **simple prior** and 50 repetitions. 

```
HitGP$
cd woZaOut
bsub < bsub.fastSTRUCTURE_woZaOut_simplerep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_woZaOut_simplerep-%j.out](./fastSTRUCTURE/HitGP/woZaOut/fastSTRUCT_woZaOut_simplere-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 


The model complexity selected by simple prior where K=XXXXXXX. To detect more subtle structure run fasSTRUCTURE with the **logistic prior** with K=XXXXXXX and 50 repetitions.

```
HitGP/woZaOut$
bsub < bsub.fastSTRUCTURE_woZaOut_logisticrep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_woZaOut_logisticrep-%j.out](./fastSTRUCTURE/HitGP/woZaOut/fastSTRUCT_woZaOut_logisticrep-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 



#### BerSS

Run fastSTRUCTURE with a range of values of K with the **simple prior** and 50 repetitions. 

```
HitGP$
cd BerSS
bsub < bsub.fastSTRUCTURE_BerSS_simplerep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_BerSS_simplerep-%j.out](./fastSTRUCTURE/HitGP/BerSS/fastSTRUCT_BerSS_simplere-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 


The model complexity selected by simple prior where XXXXXX. To detect more subtle structure run fasSTRUCTURE with the **logistic prior** and values similar those found for the simple. In this case run with K= XXXX and 50 repetitions.

```
HitGP/BerSS$
bsub < bsub.fastSTRUCTURE_BerSS_logisticrep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_BerSS_logisticrep-%j.out](./fastSTRUCTURE/HitGP/BerSS/fastSTRUCT_BerSS_logisticrep-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 

















CLUMPP

Use the script **plotfastSTRUCTURE_woZaOut.r** to recode 



To plot the output using *distruct* it is necessary to produce an adecuate input filesbased on the the .meanQ file of the desired K. The script `meanQ2distruct.R` takes the .meanQ file output of fastSTRUCTURE and builds a "population Q-matrix" (*.popq) and "individual Q-matrix" (*.indivq) input files to run distruct. After wards this files can be used by distrcut with a line similar to:

```
./distruct1.1 -K 3 -M 7 -N 59 -p distr_simpleK3.popq -i distr_simpleK3.indvq -b pop_labels -o simple3distructplot.ps

```
(in most sistems distruct is invoked with ./distruct, but for my Mac I had to compile it independently, therefore I use ./distruct1.1) 

The file `pop_labels` contains the PopID as used to run fastSTRUCTURE. Other drawing parameters are in the file `drawparams`. 


The following R script wraps up using `XXXXXXXX` and `distruct` to plot several outputs of fastSTRUCTURE with this and other data:
 
 
```
../../fastStructurePlots.r
```






