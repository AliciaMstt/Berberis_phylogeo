
##### This document details Settings, paths and scripts used to run fastSTRUCTURE and plot outputs.



Working directory and input files
------------------------------------------

The working directory for fastStructure analyses is

```
3Berberis_phylogeo/fastSTRUCTURE
```

Inside there is a directory for the set of loci analysed (ExcludingParalogs) and the subset of samples used to run Structure Independently. Namely:

* woZaOut: excluding samples from El Zamorano population (Za) and Berberis trifolia (outgroup)
* BerSS: Berberis alpina sensu stricto, populations (Aj, Iz, Ma, Pe, Tl, To)


Run fastSTRUCTURE
======================


ExcludingParalogs
------------

### Set wd and input files 
Create working directory and copy and rename accordinly structure file generated by Stacks (see script 5.*) 


```
mkdir -p ExcludingParalogs
cd ExcludingParalogs
for i in "BerwoOut" "woZaOut" "BerSS"; do
mkdir -p $i
cp ../../data.out/PopSamples_m3/ExcludingParalogs/AllLoci/$i/out.noreplicates/batch_1.structure.tsv ./$i/structure$i.str
done

```

Use the script **struc2faststruct.R** to change the value of missing data from 0 to -9 and to ensure that the first 6 columns contain samples names and metadata only (they are ignored by fastSTRUCTURE) and that there is NO header. This is the format required by fastSTRUCTURE.

```
R 
source("../struc2faststruct.R")
WD<-getwd()
for (i in c("BerwoOut", "woZaOut", "BerSS")) {
	struc2faststruct(inputfile=paste0(WD, "/", i,"/structure", i, ".str"), outputfile=paste0(WD,"/", i,"/structure", i, "fast.str"))
	} 
quit(save=("no"))
```


### Run Analyses

#### BerwoOut

Run fastSTRUCTURE with a range of values of K with the **simple prior** and 50 repetitions. 

```
ExcludingParalogs$
cd BerwoOut
bsub < bsub.fastSTRUCTURE_BerwoOut_simplerep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_BerwoOut_simplerep-%j.out](./fastSTRUCTURE/ExcludingParalogs/AllLoci/BerwoOut/fastSTRUCT_BerwoOut_simplere-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 


The model complexity selected by simple prior were K=2 and K=3. To detect more subtle structure run fasSTRUCTURE with the **logistic prior** with K= 2, 3 and 30 repetitions.

```
ExcludingParalogs/AllLoci/BerwoOut$
bsub < bsub.fastSTRUCTURE_BerwoOut_logisticrep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_BerwoOut_logisticrep-%j.out](./fastSTRUCTURE/ExcludingParalogs/AllLoci/BerwoOut/fastSTRUCT_BerwoOut_logisticrep-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 


#### woZaOut

Run fastSTRUCTURE with a range of values of K with the **simple prior** and 50 repetitions. 

```
ExcludingParalogs$
cd woZaOut
bsub < bsub.fastSTRUCTURE_woZaOut_simplerep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_woZaOut_simplerep-%j.out](./fastSTRUCTURE/ExcludingParalogs/AllLoci/woZaOut/fastSTRUCT_woZaOut_simplere-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 


The model complexity selected by simple prior were mostly K=2 and K=3 (exceptional K=9 and 8). To detect more subtle structure run fasSTRUCTURE with the **logistic prior** with K= 2, 3, 4 and 30 repetitions.

```
ExcludingParalogs/AllLoci/woZaOut$
bsub < bsub.fastSTRUCTURE_woZaOut_logisticrep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_woZaOut_logisticrep-%j.out](./fastSTRUCTURE/ExcludingParalogs/AllLoci/woZaOut/fastSTRUCT_woZaOut_logisticrep-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 



#### BerSS

Run fastSTRUCTURE with a range of values of K with the **simple prior** and 50 repetitions. 

```
ExcludingParalogs$
cd BerSS
bsub < bsub.fastSTRUCTURE_BerSS_simplerep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_BerSS_simplerep-%j.out](./fastSTRUCTURE/ExcludingParalogs/AllLoci/BerSS/fastSTRUCT_BerSS_simplere-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 


The model complexity selected by simple prior were K=2 and K=3. To detect more subtle structure run fasSTRUCTURE with the **logistic prior** and values similar those found for the simple. In this case run with K= 2, 3 and 30 repetitions.

```
ExcludingParalogs/AllLoci/BerSS$
bsub < bsub.fastSTRUCTURE_BerSS_logisticrep.job
```

Results will be saved in the repruns directory. The number i in *rep_i corresponds to the repetition, and the number k in *rep_i.k correspodns to the value of k tested. 

You can check the output summary in [fastSTRUCT_BerSS_logisticrep-%j.out](./fastSTRUCTURE/ExcludingParalogs/AllLoci/BerSS/fastSTRUCT_BerSS_logisticrep-%j.out). It contains the last tree lines of the *log files for each repetition and K, and the results of running the model complexity selection algoritm for each K. 







Plot outputs
======================


To plot using *distruct* (Rosenberg, 2004) it is necessary to produce an adecuate input filesbased on the the .meanQ file of the desired K. The script `meanQ2distruct.R` takes the .meanQ file output of fastSTRUCTURE and builds a "population Q-matrix" (*.popq) and "individual Q-matrix" (*.indivq) input files that can be used to plot fastSTRUCTURE outputs for each run. To have in a single plot the results of all the replicate runs used to run fastSTRUCTURE, it is necessary to permute the resulted cluster membership coeffcient matrices so that all replicates have as close a match as possible. This can be done with the software *CLUMPP* (Jakobsson & Rosenberg, 2007), and the output is ready for plot with distruct.  

To run CLUMPP with fastSTRUCTURE output, first prepare the input file with the custom function `meanQ2clumpp.R` which takes a set of meanQ matrices and builds the input file as required for CLUMPP. Then, run CLUMPP using the output of this function as the indfile.  

Run CLUMPP using the opition Method Greedy (M=2) and Greedy option 2 (the best permutation is constructed by greedily aligning runs. A number of input orders specified by repeats are tested and the one that produces the highest H is taken) with 100000 repeats.

This process is repeated for the **woZaOut** and **BerSS** datasets for the desired Ks with the Rmark document [fastSTRC_plotting.Rmd](./fastSTRC_plotting.Rmd). Results can be seen in [fastSTRC_plotting.html](./fastSTRC_plotting.html) or directly in the *.ps outputs generated for each dataset and K (saved inside each dataset directory).



